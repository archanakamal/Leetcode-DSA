/*
 * Problem: 542. 01 Matrix
 * Link: https://leetcode.com/problems/01-matrix/
 * 
 * Description:
 * Given a matrix consisting of 0s and 1s, return a matrix where each cell contains 
 * the distance to the nearest 0. The distance between adjacent cells is 1.
 * 
 * Approach:
 * - Use BFS (Breadth-First Search) starting from all 0-cells simultaneously.
 * - Update distances for each 1-cell when first reached.
 * - Alternative DP approach: two passes (top-left to bottom-right, then bottom-right to top-left)
 *   to update minimum distances.
 *
 * Time Complexity: O(m * n)
 * Space Complexity: O(m * n) for BFS queue or DP arrays
 */
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int m=mat.length;
        int n=mat[0].length;
        int[][] result=new int[m][n];
        Queue<int[]> q=new LinkedList<>();
        for(int[] e:result){
            Arrays.fill(e,-1);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 0) {
                    result[i][j] = 0;
                    q.add(new int[]{i, j});
                }
            }
        }

        int dr[] = {-1, 1, 0, 0};
        int dc[] = {0, 0, -1, 1};
        while(!q.isEmpty()){
            int curr[]=q.poll();
            int r=curr[0],c=curr[1];
            int mind=Integer.MAX_VALUE;
            for(int i=0;i<4;i++){
                int nr=r+dr[i];
                int nc=c+dc[i];
                if(nr>=0 && nr<m && nc>=0 && nc<n && result[nr][nc]==-1){
                        result[nr][nc]=result[r][c]+1;
                        q.add(new int[]{nr,nc});
            }
        }
        }
        return result;

    }
}
